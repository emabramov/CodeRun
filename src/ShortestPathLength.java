import java.io.*;import java.util.*;public class ShortestPathLength {    public static void main(String[] args) throws IOException {        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));        int size = Integer.parseInt(reader.readLine());        List<List<Integer>> vertexes = new ArrayList<>(size);        for (int i = 0; i < size; i++){            vertexes.add(new ArrayList<>());            char[] line = reader.readLine().replace(" ", "").toCharArray();            for (int c = 0; c < line.length; c++) {                if(line[c] == '1') vertexes.get(i).add(c);            }        }        String[] points = reader.readLine().split(" ");        int from = Integer.parseInt(points[0]) - 1;        int to = Integer.parseInt(points[1]) - 1;        boolean[] visited = new boolean[size];        Queue<Integer> queue = new LinkedList<>();        int[] distances = new int[size];        int INF = Integer.MAX_VALUE;        Arrays.fill(distances, INF);        distances[from] = 0;        visited[from] = true;        queue.add(from);        while (!queue.isEmpty() && distances[to] == INF){            int vertex = queue.poll();            for (Integer neighbour : vertexes.get(vertex)) {                if(!visited[neighbour]){                    queue.add(neighbour);                    distances[neighbour] = distances[vertex] + 1;                    visited[neighbour] = true;                }            }        }        String result = (distances[to] == INF) ? "-1" : String.valueOf(distances[to]);        writer.write(result);        reader.close();        writer.close();    }}